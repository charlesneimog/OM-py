
(:patch
 (:name "py-run and py")
 (:doc "")
 (:info
  (:created "2022/01/27 15:36:41")
  (:modified "2022/04/13 10:31:02")
  (:by "om-sharp")
  (:version 1.06))
 (:window (:size (1920 1026)) (:position (-9 -9)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class run-py-f-internal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ";;; edit a valid python code, It will just run it."
         ";;; changing the variables you want to use "
         ";;; inside om-sharp to {til}d."
         ";;; The name 'LIST' CANNOT be used as a variable name."
         "(py_var () 
\"
from om_py import to_om

list_of_numbers = []

for x in range(10):
    list_of_numbers.append(x)

to_om(list_of_numbers)

\"  

     )"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 39)
   (:y 79)
   (:w 120)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:comment
   (:x 167)
   (:y 85)
   (:w 166)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Roda diretamente")
   (:id 1))
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class run-py-f-internal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ";;; edit a valid python code, It will just run it."
         ";;; changing the variables you want to use "
         ";;; inside om-sharp to {til}d."
         ";;; The name 'LIST' CANNOT be used as a variable name."
         "(py_var (number) "
         "\""
         "from om_py import to_om"
         ""
         "list_of_numbers = []"
         ""
         "for x in range(number):"
         "    list_of_numbers.append(x)"
         ""
         "to_om(list_of_numbers)"
         ""
         "\"  "
         ""
         "     )"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 403)
   (:y 89)
   (:w 120)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "NUMBER")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :value)
   (:reference fixnum)
   (:group-id nil)
   (:name "value box")
   (:x 441)
   (:y 54)
   (:w 43)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 20)
   (:id 3))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 258)
   (:y 166)
   (:w 410)
   (:h 57)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list (:list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)))
   (:id 4))
  (:comment
   (:x 485)
   (:y 55)
   (:w 122)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "com variavel")
   (:id 5))
  (:box
   (:type :abstraction)
   (:reference
    (:object
     (:class ompyfunctioninternal)
     (:slots
      ((:name "    py    ")
       (:protected-p nil)
       (:icon :py-f)
       (:text
        (:list
         ";;; edit a valid python code,"
         ";;; changing the variables you want to use "
         ";;; inside om-sharp to {til}d."
         "(py_var (x y) "
         "\""
         "to_om(math.atan2(x,y)/math.pi*180) "
         "\")"))))))
   (:group-id nil)
   (:name "    py    ")
   (:x 761)
   (:y 182)
   (:w 195)
   (:h 60)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :hidden)
   (:pre-delay 0)
   (:lock nil)
   (:lambda :lambda)
   (:reactive nil)
   (:inputs
    (:input (:type :standard) (:name "X") (:value nil) (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 6))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "PY-ADD-VAR" "om-python"))
   (:group-id nil)
   (:name "py-add-var")
   (:x 824)
   (:y 276)
   (:w 409)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "FUNCTION")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rest")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :function)
   (:reference arithm-ser)
   (:group-id nil)
   (:name "arithm-ser")
   (:x 989)
   (:y 105)
   (:w 120)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "BEGIN")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "END")
     (:value 10)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "STEP")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "RUN-PY" "om-python"))
   (:group-id nil)
   (:name "run-py")
   (:x 748)
   (:y 575)
   (:w 87)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "CODE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :key)
     (:name "cabecario")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:comment
   (:x 1242)
   (:y 276)
   (:w 301)
   (:h 48)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "Gera codigo para nao importar os modules sempre; Grandes processamentos.")
   (:id 10))
  (:comment
   (:x 836)
   (:y 578)
   (:w 138)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Roda o codigo")
   (:id 11))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 884)
   (:y 447)
   (:w 84)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "math"))
   (:id 12))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 886)
   (:y 377)
   (:w 175)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list "numpy" "abs")))
   (:id 13))
  (:box
   (:type :function)
   (:reference reverse)
   (:group-id nil)
   (:name "reverse")
   (:x 1105)
   (:y 187)
   (:w 96)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SEQUENCE")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:comment
   (:x 585)
   (:y 468)
   (:w 179)
   (:h 68)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "caso o modulo n esteja instalado ele vai pedir pra instalar")
   (:id 15))
  (:comment
   (:x 589)
   (:y 331)
   (:w 176)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "importa o modulo inteiro")
   (:id 16))
  (:comment
   (:x 1068)
   (:y 380)
   (:w 186)
   (:h 48)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "importa usando from module import function")
   (:id 17))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 1261)
   (:y 398)
   (:w 111)
   (:h 31)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list "librosa"))
   (:id 18))
  (:comment
   (:x 1371)
   (:y 399)
   (:w 180)
   (:h 28)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Importa usando o *")
   (:id 19))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 196)
   (:y 560)
   (:w 76)
   (:h 34)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "vispy")
   (:id 20))
  (:comment
   (:x 408)
   (:y 597)
   (:w 231)
   (:h 48)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Caso o modulo n esteja instalado vai pedir pra instalar")
   (:id 21))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "PY-ADD-EXT-MODULES" "om-python"))
   (:group-id nil)
   (:name "py-add-ext-modules")
   (:x 150)
   (:y 618)
   (:w 167)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :key)
     (:name "import")
     (:value "math")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 22))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "PY->TEXT" "om-python"))
   (:group-id nil)
   (:name "py->text")
   (:x 1546)
   (:y 364)
   (:w 95)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PYTHON")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 23))
  (:box
   (:type :object)
   (:reference textbuffer)
   (:group-id nil)
   (:name nil)
   (:x 1272)
   (:y 502)
   (:w 416)
   (:h 186)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "CONTENTS") (:reactive nil)))
   (:window (:size (500 708)) (:position (64 64)))
   (:edition-params)
   (:value
    (:object
     (:class textbuffer)
     (:slots
      ((:contents
        (:list
         "x = 1
y = 10

to_om(math.atan2(x,y)/math.pi*180) 
x = 2
y = 9

to_om(math.atan2(x,y)/math.pi*180) 
x = 3
y = 8

to_om(math.atan2(x,y)/math.pi*180) 
x = 4
y = 7

to_om(math.atan2(x,y)/math.pi*180) 
x = 5
y = 6

to_om(math.atan2(x,y)/math.pi*180) 
x = 6
y = 5

to_om(math.atan2(x,y)/math.pi*180) 
x = 7
y = 4

to_om(math.atan2(x,y)/math.pi*180) 
x = 8
y = 3

to_om(math.atan2(x,y)/math.pi*180) 
x = 9
y = 2

to_om(math.atan2(x,y)/math.pi*180) 
x = 10
y = 1

to_om(math.atan2(x,y)/math.pi*180) 
"))))
     (:add-slots ((:input-mode :lines-cols)))))
   (:id 24))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "PY-ADD-EXT-MODULES" "om-python"))
   (:group-id nil)
   (:name "py-add-ext-modules")
   (:x 896)
   (:y 492)
   (:w 167)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :key)
     (:name "import")
     (:value "math")
     (:reactive nil))
    (:input
     (:type :key)
     (:name "from_import")
     (:value (:list "math" "sum"))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "import*")
     (:value "math")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 25))
  (:box
   (:type :function)
   (:reference (:symbol "MODULES" "om-python"))
   (:group-id nil)
   (:name "modules")
   (:x 1020)
   (:y 588)
   (:w 88)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "PY-EXTERNALS-MOD")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 26))
  (:box
   (:type :object)
   (:reference textbuffer)
   (:group-id nil)
   (:name nil)
   (:x 633)
   (:y 701)
   (:w 416)
   (:h 186)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:showname nil)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "CONTENTS") (:reactive nil)))
   (:window (:size nil) (:position nil))
   (:edition-params)
   (:value
    (:object
     (:class textbuffer)
     (:slots
      ((:contents
        (:list
         "
from om_py import to_om
import math
from numpy import abs
from librosa import *"))))
     (:add-slots ((:input-mode :lines-cols)))))
   (:id 27))
  (:comment
   (:x 345)
   (:y 705)
   (:w 282)
   (:h 28)
   (:fgcolor
    (:color-or-nil (:color (:color 1.0 0.0 0.0 1.0)) (:t-or-nil t)))
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "Note that to_om always will be imported!")
   (:id 28))
  (:box
   (:library "OM-py")
   (:type :function)
   (:reference (:symbol "PY-ADD-EXT-MODULES" "om-python"))
   (:group-id nil)
   (:name "py-add-ext-modules")
   (:x 786)
   (:y 417)
   (:w 167)
   (:h 31)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:icon :left)
   (:lock nil)
   (:lambda nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :key)
     (:name "import")
     (:value "math")
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 29))
  (:box
   (:type :value)
   (:reference (:symbol "SIMPLE-TEXT-STRING" "LISPWORKS"))
   (:group-id nil)
   (:name "value box")
   (:x 840)
   (:y 382)
   (:w 61)
   (:h 31)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value "math")
   (:id 30))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "value box")
   (:x 34)
   (:y 248)
   (:w 410)
   (:h 57)
   (:color
    (:color-or-nil
     (:color (:color 1.0S0 1.0S0 1.0S0 1.0))
     (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:reactive nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "in")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 0 1 2 3 4 5 6 7 8 9)))
   (:id 31)))
 (:connections
  (:connection (:from (:box 0 :out 0)) (:to (:box 31 :in 0)))
  (:connection (:from (:box 2 :out 0)) (:to (:box 4 :in 0)))
  (:connection (:from (:box 3 :out 0)) (:to (:box 2 :in 0)))
  (:connection (:from (:box 6 :out 0)) (:to (:box 7 :in 0)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 9 :in 0))
   (:attributes (:color nil :style nil :modif (0 -21/79))))
  (:connection (:from (:box 7 :out 0)) (:to (:box 23 :in 0)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 7 :in 1)))
  (:connection (:from (:box 8 :out 0)) (:to (:box 14 :in 0)))
  (:connection (:from (:box 12 :out 0)) (:to (:box 25 :in 0)))
  (:connection (:from (:box 13 :out 0)) (:to (:box 25 :in 1)))
  (:connection (:from (:box 14 :out 0)) (:to (:box 7 :in 2)))
  (:connection (:from (:box 18 :out 0)) (:to (:box 25 :in 2)))
  (:connection (:from (:box 20 :out 0)) (:to (:box 22 :in 0)))
  (:connection (:from (:box 23 :out 0)) (:to (:box 24 :in 0)))
  (:connection (:from (:box 25 :out 0)) (:to (:box 26 :in 0)))
  (:connection (:from (:box 26 :out 0)) (:to (:box 27 :in 1)))
  (:connection (:from (:box 29 :out 0)) (:to (:box 9 :in 1)))
  (:connection (:from (:box 30 :out 0)) (:to (:box 29 :in 0)))))